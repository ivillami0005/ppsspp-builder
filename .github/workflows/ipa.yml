name: Build & Package iOS (PPSSPP)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-14

    steps:
    # 1) Checkout your main repo
    - name: Checkout PPSSPP repo
      uses: actions/checkout@v4

    # 2) Clone the MoltenVK framework at the exact commit
    - name: Fetch MoltenVK.xcframework
      run: |
        git clone https://github.com/hrydgard/ppsspp-moltenvk.git --depth 1
        cd ppsspp-moltenvk
        git checkout 0bf904d2d1d159eb95bdefcd8432eee79ee1da14
        cd ..

    # 3) Install iOS-specific tools
    - name: Install iOS dependencies
      run: |
        brew install ldid imagemagick

    # 4) Copy PPSSPP app icons (1×, 2×, 3×)
    - name: Generate iOS icons from PPSSPP assets
      run: |
        mkdir -p build-ios/PPSSPP.app
        cp Preferences/PPSSPP/org.ppsspp.ppsspp.png   build-ios/PPSSPP.app/Icon-60.png
        cp Preferences/PPSSPP/org.ppsspp.ppsspp@2x.png build-ios/PPSSPP.app/Icon-120.png
        cp Preferences/PPSSPP/org.ppsspp.ppsspp@3x.png build-ios/PPSSPP.app/Icon-180.png
        cp Preferences/PPSSPP/org.ppsspp.ppsspp.png   build-ios/PPSSPP.app/AppIcon.png

    # 5) Write out your full entitlement set
    - name: Create full entitlements (ent.xml)
      run: |
        cat > ent.xml <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>platform-application</key><true/>
          <key>com.apple.developer.kernel.extended-virtual-addressing</key><true/>
          <key>com.apple.developer.kernel.increased-memory-limit</key><true/>
          <key>com.apple.developer.networking.multicast</key><true/>
          <key>com.apple.private.security.container-manager</key><true/>
          <key>com.apple.private.security.no-sandbox</key><true/>
          <key>com.apple.private.security.storage.AppDataContainers</key><true/>
          <key>com.apple.security.iokit-user-client-class</key>
          <array>
            <string>AGXDeviceUserClient</string>
            <string>IOMobileFramebufferUserClient</string>
            <string>IOSurfaceRootUserClient</string>
          </array>
          <key>get-task-allow</key><true/>
        </dict>
        </plist>
        EOF

    # 6) Build & sign the PPSSPP app, bundling MoltenVK.a
    - name: Build & sign PPSSPP
      env:
        CC: clang
        CXX: clang++
      run: |
        # Build PPSSPP for iOS
        ./b.sh --ios

        # Prepare app bundle
        mkdir -p build-ios/PPSSPP.app/Frameworks

        # Copy the static MoltenVK library
        cp ppsspp-moltenvk/MoltenVK.xcframework/ios-arm64/libMoltenVK.a \
           build-ios/PPSSPP.app/Frameworks/

        # Ad-hoc sign both the main binary and MoltenVK
        ldid -Sent.xml build-ios/PPSSPP.app/PPSSPP
        ldid -Sent.xml build-ios/PPSSPP.app/Frameworks/libMoltenVK.a

        # Embed version metadata
        GIT_VERSION=$(git describe --tags --always)
        echo "${GIT_VERSION#v}" > build-ios/PPSSPP.app/Version.txt

        # Update Info.plist with icon entries
        plutil -insert CFBundleIconFiles \
          -json '["Icon-60.png","Icon-120.png","Icon-180.png"]' \
          build-ios/PPSSPP.app/Info.plist
        plutil -insert CFBundleIcons \
          -json '{ "CFBundlePrimaryIcon": {"CFBundleIconFiles":["AppIcon.png"]} }' \
          build-ios/PPSSPP.app/Info.plist

    # 7) Package into an IPA
    - name: Package PPSSPP.ipa
      run: |
        mkdir -p ppsspp/Payload
        cp -a build-ios/PPSSPP.app ppsspp/Payload/
        (cd ppsspp && zip -qry PPSSPP.ipa Payload)
        rm -rf ppsspp/Payload

    # 8) Upload IPA for download
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: PPSSPP-iOS-Adhoc
        path: ppsspp/PPSSPP.ipa
